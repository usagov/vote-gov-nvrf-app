# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/configuration-reference/#jobs
jobs:
  fetch-nvrf:
    # Specify the execution environment. You can specify an image from Docker Hub or use one of our convenience images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/configuration-reference/#executor-job
    docker:
      - image: cimg/base:stable
    # Add steps to the job
    # See: https://circleci.com/docs/configuration-reference/#steps
    environment:
      URL: https://www.eac.gov/sites/default/files/eac_assets/1/6/Federal_Voter_Registration_ENG.pdf
    steps:
      #download pdf from
      - run: |
         curl -o Federal_Voter_Registration_ENG.pdf $URL
      #save pdf as an artifact
      - store_artifacts:
          path: Federal_Voter_Registration_ENG.pdf
          destination: /pdf-files
  create-pr:
    docker:
      - image: cimg/base:stable
    environment:
      GITHUB_TOKEN: user key
      GITHUB_REPO: https://github.com/usagov/vote-gov-nvrf-app
    steps:
      - run: |
         curl -fLSs https://circle.ci/cli | bash 
         circleci config upload -- repo ${GITHUB_REPO} -- branch feature/VOTE-289/download-nvrf-circleci -- file /pdf-files/Federal_Voter_Registration_ENG.pdf
         circleci create-pull-request -- repo ${GITHUB_REPO} -- branch feature/VOTE-289/download-nvrf-circleci -- title "New NVRF PDF" -- description "Replace the current NVRF PDF file with this file pulled from eac.gov"
    #IDEA: if the new pdf is the same as the old PDF, automatically merge PR

# Orchestrate jobs using workflows
# See: https://circleci.com/docs/configuration-reference/#workflows
workflows:
  update-nvrf-workflow:
    jobs:
      - fetch-nvrf
      - create-pr



#  - name: Create PR for Stale Branches
#       env:
#         branches: ${{ steps.stale-branches.outputs.branches}}
#         GITHUB_TOKEN: '${{ secrets.ADD_TO_PROJECT_PAT }}'
#         Tech_Lead: '${{ vars.TECH_LEAD }}'
#       run: |
#         branches=( ${branches} )
#         for branch in "${branches[@]}"; do
#           git fetch --all
#           git checkout ${branch}
#           git branch --show-current
#           gh pr create --base "main" --head ${branch} --title  "[Stale Branch] - Please review this stale branch: ${branch}" --assignee ${{ env.Tech_Lead }} --reviewer ${{ env.Tech_Lead }} --body "Hi @${{ env.Tech_Lead }} This PR is ready for your review! This branch has been stale. Thank you!"
#         done